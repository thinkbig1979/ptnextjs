{
  "metadata": {
    "generated": "2025-08-25",
    "phase": "Phase 2.1 - Relationship Mapping",
    "purpose": "Strapi-specific relation configurations for all content types"
  },
  "relation_configurations": {
    "partner": {
      "collection_name": "partners",
      "relations": {
        "category": {
          "type": "manyToOne",
          "target": "api::category.category",
          "mappedBy": null,
          "inversedBy": "partners",
          "configurable": false,
          "writable": true,
          "visible": true,
          "useJoinTable": false,
          "required": true,
          "description": "Partner belongs to one category"
        },
        "tags": {
          "type": "manyToMany",
          "target": "api::tag.tag",
          "mappedBy": null,
          "inversedBy": "partners",
          "configurable": false,
          "writable": true,
          "visible": true,
          "useJoinTable": true,
          "joinTable": {
            "name": "partners_tags_links",
            "joinColumn": {
              "name": "partner_id",
              "referencedColumnName": "id"
            },
            "inverseJoinColumn": {
              "name": "tag_id", 
              "referencedColumnName": "id"
            }
          },
          "required": false,
          "min": 1,
          "description": "Partner can have multiple tags"
        },
        "products": {
          "type": "oneToMany",
          "target": "api::product.product",
          "mappedBy": "partner",
          "inversedBy": null,
          "configurable": false,
          "writable": true,
          "visible": true,
          "useJoinTable": false,
          "required": false,
          "description": "Partner can have multiple products"
        }
      }
    },
    "product": {
      "collection_name": "products",
      "relations": {
        "partner": {
          "type": "manyToOne",
          "target": "api::partner.partner",
          "mappedBy": null,
          "inversedBy": "products",
          "configurable": false,
          "writable": true,
          "visible": true,
          "useJoinTable": false,
          "required": true,
          "description": "Product belongs to one partner"
        },
        "category": {
          "type": "manyToOne",
          "target": "api::category.category", 
          "mappedBy": null,
          "inversedBy": "products",
          "configurable": false,
          "writable": true,
          "visible": true,
          "useJoinTable": false,
          "required": true,
          "description": "Product belongs to one category"
        },
        "tags": {
          "type": "manyToMany",
          "target": "api::tag.tag",
          "mappedBy": null,
          "inversedBy": "products",
          "configurable": false,
          "writable": true,
          "visible": true,
          "useJoinTable": true,
          "joinTable": {
            "name": "products_tags_links",
            "joinColumn": {
              "name": "product_id",
              "referencedColumnName": "id"
            },
            "inverseJoinColumn": {
              "name": "tag_id",
              "referencedColumnName": "id"
            }
          },
          "required": false,
          "min": 1,
          "description": "Product can have multiple tags"
        }
      }
    },
    "blog_post": {
      "collection_name": "blog-posts",
      "relations": {
        "blog_category": {
          "type": "manyToOne",
          "target": "api::blog-category.blog-category",
          "mappedBy": null,
          "inversedBy": "blog_posts",
          "configurable": false,
          "writable": true,
          "visible": true,
          "useJoinTable": false,
          "required": true,
          "description": "Blog post belongs to one blog category"
        },
        "tags": {
          "type": "manyToMany",
          "target": "api::tag.tag",
          "mappedBy": null,
          "inversedBy": "blog_posts",
          "configurable": false,
          "writable": true,
          "visible": true,
          "useJoinTable": true,
          "joinTable": {
            "name": "blog_posts_tags_links",
            "joinColumn": {
              "name": "blog_post_id",
              "referencedColumnName": "id"
            },
            "inverseJoinColumn": {
              "name": "tag_id",
              "referencedColumnName": "id"
            }
          },
          "required": false,
          "min": 1,
          "description": "Blog post can have multiple tags"
        }
      }
    },
    "category": {
      "collection_name": "categories",
      "relations": {
        "partners": {
          "type": "oneToMany",
          "target": "api::partner.partner",
          "mappedBy": "category",
          "inversedBy": null,
          "configurable": false,
          "writable": true,
          "visible": true,
          "useJoinTable": false,
          "required": false,
          "description": "Category can have multiple partners"
        },
        "products": {
          "type": "oneToMany",
          "target": "api::product.product",
          "mappedBy": "category",
          "inversedBy": null,
          "configurable": false,
          "writable": true,
          "visible": true,
          "useJoinTable": false,
          "required": false,
          "description": "Category can have multiple products"
        }
      }
    },
    "blog_category": {
      "collection_name": "blog-categories",
      "relations": {
        "blog_posts": {
          "type": "oneToMany",
          "target": "api::blog-post.blog-post",
          "mappedBy": "blog_category",
          "inversedBy": null,
          "configurable": false,
          "writable": true,
          "visible": true,
          "useJoinTable": false,
          "required": false,
          "description": "Blog category can have multiple blog posts"
        }
      }
    },
    "tag": {
      "collection_name": "tags",
      "relations": {
        "partners": {
          "type": "manyToMany",
          "target": "api::partner.partner",
          "mappedBy": "tags",
          "inversedBy": null,
          "configurable": false,
          "writable": true,
          "visible": true,
          "useJoinTable": true,
          "joinTable": {
            "name": "partners_tags_links",
            "joinColumn": {
              "name": "tag_id",
              "referencedColumnName": "id"
            },
            "inverseJoinColumn": {
              "name": "partner_id",
              "referencedColumnName": "id"
            }
          },
          "required": false,
          "description": "Tag can be used by multiple partners"
        },
        "products": {
          "type": "manyToMany",
          "target": "api::product.product",
          "mappedBy": "tags",
          "inversedBy": null,
          "configurable": false,
          "writable": true,
          "visible": true,
          "useJoinTable": true,
          "joinTable": {
            "name": "products_tags_links",
            "joinColumn": {
              "name": "tag_id",
              "referencedColumnName": "id"
            },
            "inverseJoinColumn": {
              "name": "product_id",
              "referencedColumnName": "id"
            }
          },
          "required": false,
          "description": "Tag can be used by multiple products"
        },
        "blog_posts": {
          "type": "manyToMany",
          "target": "api::blog-post.blog-post",
          "mappedBy": "tags",
          "inversedBy": null,
          "configurable": false,
          "writable": true,
          "visible": true,
          "useJoinTable": true,
          "joinTable": {
            "name": "blog_posts_tags_links",
            "joinColumn": {
              "name": "tag_id",
              "referencedColumnName": "id"
            },
            "inverseJoinColumn": {
              "name": "blog_post_id",
              "referencedColumnName": "id"
            }
          },
          "required": false,
          "description": "Tag can be used by multiple blog posts"
        }
      }
    },
    "team_member": {
      "collection_name": "team-members",
      "relations": {},
      "description": "Team members have no relations with other content types"
    },
    "company_info": {
      "collection_name": "company-info",
      "type": "singleType",
      "relations": {},
      "description": "Company info is a single type with no relations"
    }
  },
  "component_relations": {
    "product_image": {
      "component_name": "product.product-image",
      "category": "product",
      "relations": {},
      "parent_relation": {
        "target": "api::product.product",
        "field": "product_images",
        "type": "component",
        "repeatable": true
      },
      "description": "ProductImage is a component belonging to Product"
    },
    "feature": {
      "component_name": "product.feature",
      "category": "product", 
      "relations": {},
      "parent_relation": {
        "target": "api::product.product",
        "field": "features",
        "type": "component",
        "repeatable": true
      },
      "description": "Feature is a component belonging to Product"
    }
  },
  "migration_mapping": {
    "current_to_strapi": {
      "partner_category": {
        "current": "Partner.category: string",
        "strapi": "Partner.category: relation (manyToOne)",
        "migration_query": "UPDATE partners SET category_id = (SELECT id FROM categories WHERE name = partners.category)"
      },
      "product_partner": {
        "current": "Product.partnerId: string",
        "strapi": "Product.partner: relation (manyToOne)", 
        "migration_query": "UPDATE products SET partner_id = CAST(products.partnerId as INTEGER)"
      },
      "product_category": {
        "current": "Product.category: string",
        "strapi": "Product.category: relation (manyToOne)",
        "migration_query": "UPDATE products SET category_id = (SELECT id FROM categories WHERE name = products.category)"
      },
      "blog_post_category": {
        "current": "BlogPost.category: string",
        "strapi": "BlogPost.blog_category: relation (manyToOne)",
        "migration_query": "UPDATE blog_posts SET blog_category_id = (SELECT id FROM blog_categories WHERE name = blog_posts.category)"
      },
      "partner_tags": {
        "current": "Partner.tags: string[]",
        "strapi": "Partner.tags: relation (manyToMany)",
        "migration_strategy": "Create Tag entities from unique tag strings, then populate junction table"
      },
      "product_tags": {
        "current": "Product.tags: string[]", 
        "strapi": "Product.tags: relation (manyToMany)",
        "migration_strategy": "Use same Tag entities as partners, populate junction table"
      },
      "blog_post_tags": {
        "current": "BlogPost.tags: string[]",
        "strapi": "BlogPost.tags: relation (manyToMany)",
        "migration_strategy": "Use same Tag entities, populate junction table"
      }
    }
  },
  "population_strategies": {
    "minimal_population": {
      "partners": "populate=category",
      "products": "populate=partner,category",
      "blog_posts": "populate=blog_category",
      "description": "Minimal relations for basic display"
    },
    "standard_population": {
      "partners": "populate=category,tags",
      "products": "populate=partner,category,tags,product_images",
      "blog_posts": "populate=blog_category,tags",
      "description": "Standard relations for most use cases"
    },
    "full_population": {
      "partners": "populate=category,tags,products.category",
      "products": "populate=partner.category,category,tags,product_images.image,features",
      "blog_posts": "populate=blog_category,tags",
      "description": "Full relations for detailed views"
    },
    "deep_population": {
      "partners": "populate[0]=category&populate[1]=tags&populate[2]=products&populate[3]=products.category&populate[4]=products.tags",
      "description": "Deep nested population (use sparingly for performance)"
    }
  },
  "query_optimization": {
    "required_indexes": [
      {
        "table": "products",
        "column": "partner_id",
        "type": "btree",
        "purpose": "Foreign key index for partner relation"
      },
      {
        "table": "partners", 
        "column": "category_id",
        "type": "btree",
        "purpose": "Foreign key index for category relation"
      },
      {
        "table": "products",
        "column": "category_id", 
        "type": "btree",
        "purpose": "Foreign key index for category relation"
      },
      {
        "table": "blog_posts",
        "column": "blog_category_id",
        "type": "btree",
        "purpose": "Foreign key index for blog category relation"
      },
      {
        "table": "partners_tags_links",
        "columns": ["partner_id", "tag_id"],
        "type": "btree",
        "purpose": "Junction table composite index"
      },
      {
        "table": "products_tags_links", 
        "columns": ["product_id", "tag_id"],
        "type": "btree",
        "purpose": "Junction table composite index"
      },
      {
        "table": "blog_posts_tags_links",
        "columns": ["blog_post_id", "tag_id"], 
        "type": "btree",
        "purpose": "Junction table composite index"
      }
    ],
    "query_patterns": {
      "partners_with_products": {
        "endpoint": "/api/partners?populate=products",
        "sql_equivalent": "SELECT p.*, pr.* FROM partners p LEFT JOIN products pr ON p.id = pr.partner_id"
      },
      "products_by_category": {
        "endpoint": "/api/products?filters[category][name][$eq]=Navigation&populate=partner,category",
        "sql_equivalent": "SELECT p.* FROM products p JOIN categories c ON p.category_id = c.id WHERE c.name = 'Navigation'"
      },
      "content_by_tag": {
        "endpoint": "/api/partners?filters[tags][name][$in]=IoT,Marine",
        "sql_equivalent": "SELECT p.* FROM partners p JOIN partners_tags_links ptl ON p.id = ptl.partner_id JOIN tags t ON ptl.tag_id = t.id WHERE t.name IN ('IoT', 'Marine')"
      }
    }
  },
  "validation_rules": {
    "relation_constraints": {
      "product_partner_required": {
        "field": "Product.partner",
        "rule": "required",
        "message": "Product must belong to a partner"
      },
      "partner_category_required": {
        "field": "Partner.category", 
        "rule": "required",
        "message": "Partner must have a category"
      },
      "product_category_required": {
        "field": "Product.category",
        "rule": "required", 
        "message": "Product must have a category"
      },
      "blog_post_category_required": {
        "field": "BlogPost.blog_category",
        "rule": "required",
        "message": "Blog post must have a category"
      },
      "minimum_tags": {
        "fields": ["Partner.tags", "Product.tags", "BlogPost.tags"],
        "rule": "min_count: 1",
        "message": "Content must have at least one tag"
      }
    },
    "cascade_rules": {
      "delete_partner": {
        "rule": "restrict",
        "reason": "Cannot delete partner with existing products",
        "alternative": "Delete or reassign products first"
      },
      "delete_category": {
        "rule": "restrict", 
        "reason": "Cannot delete category with existing partners or products",
        "alternative": "Reassign content to different category first"
      },
      "delete_tag": {
        "rule": "cascade",
        "reason": "Removing tag from junction tables is safe",
        "action": "Remove tag associations but keep content"
      }
    }
  },
  "api_client_updates": {
    "transformation_changes": {
      "partner_transformations": {
        "old": "category: item.attributes.category?.data?.attributes?.name || ''",
        "new": "category: item.attributes.category?.data || null, categoryName: item.attributes.category?.data?.attributes?.name || ''"
      },
      "product_transformations": {
        "old": "partnerId: item.attributes.partner?.data?.id?.toString() || '', partnerName: item.attributes.partner?.data?.attributes?.name || ''",
        "new": "partner: item.attributes.partner?.data || null, partnerId: item.attributes.partner?.data?.id?.toString() || '', partnerName: item.attributes.partner?.data?.attributes?.name || ''"
      },
      "tag_transformations": {
        "old": "tags: item.attributes.tags?.data?.map((tag: any) => tag.attributes.name) || []",
        "new": "tags: item.attributes.tags?.data || [], tagNames: item.attributes.tags?.data?.map((tag: any) => tag.attributes.name) || []"
      }
    }
  }
}