/**
 * AuthContext Test Template
 * Tests authentication context provider and state management
 */

import { renderHook, act, waitFor } from '@testing-library/react';
import { MockAuthProvider } from '@/__tests__/setup/react-testing-library.config';
import { mockTier2Vendor, mockAdminUser } from '@/__tests__/fixtures/vendors';

// import { AuthProvider, useAuth } from '@/contexts/AuthContext';

describe('AuthContext', () => {
  beforeEach(() => {
    localStorage.clear();
    jest.clearAllMocks();
  });

  describe('Initial State', () => {
    it('provides unauthenticated state by default', () => {
      // const { result } = renderHook(() => useAuth(), { wrapper: AuthProvider });

      // expect(result.current.user).toBeNull();
      // expect(result.current.isAuthenticated).toBe(false);
      // expect(result.current.isLoading).toBe(true); // Initially loading
    });
  });

  describe('Login', () => {
    it('updates state on successful login', async () => {
      // const { result } = renderHook(() => useAuth(), { wrapper: AuthProvider });

      // act(() => {
      //   result.current.login('vendor@example.com', 'password123');
      // });

      // await waitFor(() => {
      //   expect(result.current.isAuthenticated).toBe(true);
      //   expect(result.current.user).toEqual(mockTier2Vendor);
      // });
    });

    it('stores token in localStorage', async () => {
      // const { result } = renderHook(() => useAuth(), { wrapper: AuthProvider });

      // await act(async () => {
      //   await result.current.login('vendor@example.com', 'password123');
      // });

      // expect(localStorage.getItem('access_token')).toBeTruthy();
    });

    it('handles login error', async () => {
      server.use(
        http.post('/api/auth/login', () => {
          return HttpResponse.json(
            { error: 'Invalid credentials' },
            { status: 401 }
          );
        })
      );

      // const { result } = renderHook(() => useAuth(), { wrapper: AuthProvider });

      // await act(async () => {
      //   await result.current.login('wrong@example.com', 'wrongpass');
      // });

      // expect(result.current.isAuthenticated).toBe(false);
      // expect(result.current.user).toBeNull();
    });
  });

  describe('Logout', () => {
    it('clears user state', async () => {
      // const { result } = renderHook(() => useAuth(), { wrapper: AuthProvider });

      // // Login first
      // await act(async () => {
      //   await result.current.login('vendor@example.com', 'password123');
      // });

      // // Then logout
      // act(() => {
      //   result.current.logout();
      // });

      // expect(result.current.user).toBeNull();
      // expect(result.current.isAuthenticated).toBe(false);
    });

    it('removes token from localStorage', async () => {
      // const { result } = renderHook(() => useAuth(), { wrapper: AuthProvider });

      // await act(async () => {
      //   await result.current.login('vendor@example.com', 'password123');
      // });

      // act(() => {
      //   result.current.logout();
      // });

      // expect(localStorage.getItem('access_token')).toBeNull();
    });
  });

  describe('Session Restoration', () => {
    it('restores session from valid token on mount', async () => {
      const validToken = generateTestToken(mockTier2Vendor);
      localStorage.setItem('access_token', validToken);

      // const { result } = renderHook(() => useAuth(), { wrapper: AuthProvider });

      // await waitFor(() => {
      //   expect(result.current.isAuthenticated).toBe(true);
      //   expect(result.current.user).toEqual(mockTier2Vendor);
      // });
    });

    it('does not restore session from expired token', async () => {
      const expiredToken = generateExpiredToken(mockTier2Vendor);
      localStorage.setItem('access_token', expiredToken);

      // const { result } = renderHook(() => useAuth(), { wrapper: AuthProvider });

      // await waitFor(() => {
      //   expect(result.current.isAuthenticated).toBe(false);
      //   expect(result.current.user).toBeNull();
      // });
    });

    it('ignores invalid token', async () => {
      localStorage.setItem('access_token', 'invalid-token');

      // const { result } = renderHook(() => useAuth(), { wrapper: AuthProvider });

      // await waitFor(() => {
      //   expect(result.current.isAuthenticated).toBe(false);
      // });
    });
  });

  describe('Token Refresh', () => {
    it('refreshes expired access token', async () => {
      // const { result } = renderHook(() => useAuth(), { wrapper: AuthProvider });

      // await act(async () => {
      //   await result.current.refreshToken();
      // });

      // expect(localStorage.getItem('access_token')).toBeTruthy();
    });
  });

  describe('Profile Update', () => {
    it('updates user profile in context', async () => {
      // const { result } = renderHook(() => useAuth(), { wrapper: AuthProvider });

      // await act(async () => {
      //   await result.current.login('vendor@example.com', 'password123');
      // });

      // await act(async () => {
      //   await result.current.updateProfile({ companyName: 'Updated Name' });
      // });

      // expect(result.current.user.companyName).toBe('Updated Name');
    });
  });
});
